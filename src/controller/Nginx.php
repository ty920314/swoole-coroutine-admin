<?php


namespace app\controller;


use app\lib\WorkError;
use Co\System;
use Swoole\Coroutine;

class Nginx extends Common
{
    /**
     * nginx.conf 路径
     * @var string
     */
    private $confPath = '';
    /**
     * @var string
     */
    private $confContent = '';
    /**
     * @var bool nginx is working?
     */
    private $isStart = false;
    /**
     * @var string servers/*.conf
     */
    private $conDir;
    /**
     * @var array *.conf list
     */
    private $conFiles;

    /**
     * @throws WorkError
     */
    public function Init()
    {
        $this->_getConfPath();
        $this->_getConfContent();
        $this->_isStart();
        $this->_confDir();
        parent::Init(); // TODO: Change the autogenerated stub
    }

    /**
     * 获取nginx.conf 文件路径
     * @throws
     */
    private function _getConfPath()
    {
        $nginxBinPathRes = System::exec("which nginx");
        if ($nginxBinPathRes['output']) {
            $nginxBinPath = substr($nginxBinPathRes['output'], 0, -1);
            $res = System::exec(sprintf("%s -t 2>&1", $nginxBinPath))['output'];
            preg_match("/\/[\w\/.]+conf/", $res, $result);
            $this->confPath = $result[0];
        } else {
            throw  new WorkError("please install nginx!");
        }
    }

    /**
     * nginx is working?
     */
    private function _isStart()
    {
        $grep = System::exec("ps -A |grep nginx")['output'];
        preg_match("~nginx: master process~", $grep, $tmp);
        $this->isStart = boolval($tmp);
        unset($grep, $tmp);
    }

    /**
     * 获取nginx.conf 内容
     */
    private function _getConfContent()
    {
        $this->confContent = \getFileContent($this->confPath);
    }

    /**
     * 获取nginx *.conf 文件列表
     * 会在 nginx.conf 加入 include servers/*
     */
    private function _confDir()
    {
        preg_match("/include servers\/\*/", $this->confContent, $tmp);
        if (empty($tmp)) {
            $tmp = explode("}", $this->confContent);
            $tmp[count($tmp) - 2] = PHP_EOL . "     include servers/*;" . PHP_EOL;
            $this->confContent = join("}", $tmp);
            System::writeFile($this->confPath, $this->confContent);
        }
        unset($tmp);
        $pathInfo = pathinfo($this->confPath);
        $this->conDir = $pathInfo['dirname'] . DIRECTORY_SEPARATOR . "servers";
        !is_dir($this->conDir) && @mkdir($this->conDir);
        $handle = opendir($this->conDir);
        while (false !== ($file = readdir($handle))) {
            if (!in_array($file, ['.', '..'], true)) {
                $this->conFiles[] = $file;
            }
        }
    }

    /**
     * 获取nginx 基本配置信息
     */
    public function actionNginxConf()
    {
        return $this->sendMsg('', [
            'nginxStart' => $this->isStart,
            'nginxConf' => $this->confPath,
            'confList' => $this->conFiles,
            'confContent' => $this->confContent
        ]);
    }

    /**
     * 获取单个配置文件内容
     */
    public function actionGetConf()
    {
        $file = $this->get('confFile');
        $filePath = $this->conDir . DIRECTORY_SEPARATOR . $file;
        if (empty($file)) {
            return $this->error("参数错误");
        }
        if (!in_array($file, $this->conFiles)) {
            return $this->error("未找到{$filePath}文件");
        }
        return $this->sendMsg('ok', ['data' => \getFileContent($filePath)]);
    }
}